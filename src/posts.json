{
    "posts": [
        {
            "title": "Switching Screens",
            "date": "6/30/2025",
            "summary": "My First Experience With Using React",
            "body": [
                "Hello,",
                "This is the first post of - hopefully - many. As the title suggests, creating this website has been my first proper interaction with react and typescript, and while my current understanding of the two is growing, I would like to share one of the struggles I faced while developing this website: switching between screens.",
                "I'll admit, at first I thought that this was going to be a simple task of using the a (or link) tag, but I discovered that most react websites are single page applications: the content may change, but the url remains constant. This effect is typically acheived through conditional rendering, and, attempting to learn the community standards, I decided to do this as well.",
                "That said, my first attempt involved managing state in the App component and passing the updater function to the child nodes as a property (prop) if needed. I was certain this would be fine, but I was greeted by an error message upon testing app: I could not call the updater function from anywhere that wasn't the app node specifically. According to <a href='https://stackoverflow.com/questions/65380054/how-to-return-a-value-from-a-component-in-react'>this</a> helpful stack overflow post, data in react only flows in one direction: from parent to child, so I needed to find a different solution.",
                "<img src='/diagram1.jpg' alt='Error message' className='centered w-50'/><p className='text-center p-25 second'>How my first attempt functioned.</p>",
                "I initially assumed that calling a wrapper function that was in the App.tsx file in order to call the updater function managing the state in charge of the screens would not work. I figured the machine code would simplify down to equivilate my first attempted solution, thus resulting in an error. My next idea was to use a custom event and call the dispatch function in the child nodes as to trigger an event listener in the app node that would call the updater function and therefore switch screens.",
                "<img src='/diagram2.png' alt='Error message' className='centered w-50'/><p className='text-center p-25 second'>Second attempt.</p>",
                "This ultimately worked and so I have decided upon keeping it, but I have heard that calling a seperate function to call the updater function does work (though I remain skeptical), which might be something to implement in the future. As of current projects, however, I am currently working on a random dungeon generator generator (an app to generate code that would generate a random dungeon), and you can expect an update soon on that.",
                "Thanks for reading - Fenton"
            ]
        },
        {
            "title": "Random Dungeon Generator",
            "date": "7/1/2025",
            "summary": "Brief Overview of my Random Dungeon Generator Generator",
            "body": [
                "A quick update before the main point: I did some more research on how switching screens should work in react, and have now implemented what is hopefully the proper method of doing so. Now, I manage state for the current screen on the main App.tsx file and pass a wrapper function to the child nodes that calls the updater function for the state. Additionally, I have switched from storing the current screen as state to storing an object, making it easier to manage. Finally, I can now add images and links to posts a little easier so you can expect more of those in the future.",
                "<img src='/diagram3.png' alt='Error message' className='centered w-50'/><p className='text-center p-25 second'>New method of switching screens</p>",
                "The main object is to discuss my current project: a random dungeon generator generator. The name is a little weird, but the idea is to write an app that will allow me to generate a set of code that, when run, will output a random dungeon.",
                "I often find myself creating rogue like dungeon games in my spare time, and it becomes very tedious to write a new random dungeon generator each time and for each different algorithm or approach to generation. So, to minimize this time, I want the random dungeon generate to be able to allow the user to select an algorithm for random generation, define some rooms, and then generate some code in java or gd-script that will generate a random dungeon.",
                "<img src='/diagram4.png' alt='Error message' className='centered w-50'/><p className='text-center p-25 second'>Random Dungeon Generator Generator Algorithm</p>",
                "Currently, I am working on allowing the user to add doors to rooms, but, because the rooms can be concave, I need to write an algorithm to find the wall the user's mouse is closest to and place a door on that wall. I am familiar with a line to point distance formula that should help, so you can expect an update on that soon. If you ever want to run the project yourself or take a look at the code (though not finished yet), you can find the github page <a href='https://github.com/Fenton-P/random-dungeon-generator-generator'>here</a>.",
                "Thanks for reading - Fenton"
            ]
        }
    ]
}