{
    "posts": [
        {
            "title": "Switching Screens",
            "date": "6/30/2025",
            "summary": "My First Experience With Using React",
            "body": [
                "Hello,",
                "This is the first post of - hopefully - many. As the title suggests, creating this website has been my first proper interaction with react and typescript, and while my current understanding of the two is growing, I would like to share one of the struggles I faced while developing this website: switching between screens.",
                "I'll admit, at first I thought that this was going to be a simple task of using the a (or link) tag, but I discovered that most react websites are single page applications: the content may change, but the url remains constant. This effect is typically acheived through conditional rendering, and, attempting to learn the community standards, I decided to do this as well.",
                "That said, my first attempt involved managing state in the App component and passing the updater function to the child nodes as a property (prop) if needed. I was certain this would be fine, but I was greeted by an error message upon testing app: I could not call the updater function from anywhere that wasn't the app node specifically. According to ^^Link, https://stackoverflow.com/questions/65380054/how-to-return-a-value-from-a-component-in-react, this^^ helpful stack overflow post, data in react only flows in one direction: from parent to child, so I needed to find a different solution.",
                "^^Image, diagram1.jpg, How my First Attempt Functioned^^",
                "I initially assumed that calling a wrapper function that was in the App.tsx file in order to call the updater function managing the state in charge of the screens would not work. I figured the machine code would simplify down to equivilate my first attempted solution, thus resulting in an error. My next idea was to use a custom event and call the dispatch function in the child nodes as to trigger an event listener in the app node that would call the updater function and therefore switch screens.",
                "^^Image, diagram2.png, Second Attempt^^",
                "This ultimately worked and so I have decided upon keeping it, but I have heard that calling a seperate function to call the updater function does work (though I remain skeptical), which might be something to implement in the future. As of current projects, however, I am currently working on a random dungeon generator generator (an app to generate code that would generate a random dungeon), and you can expect an update soon on that.",
                "Thanks for reading - Fenton"
            ]
        },
        {
            "title": "Random Dungeon Generator",
            "date": "7/1/2025",
            "summary": "Brief Overview of my Random Dungeon Generator Generator",
            "body": [
                "A quick update before the main point: I did some more research on how switching screens should work in react, and have now implemented what is hopefully the proper method of doing so. Now, I manage state for the current screen on the main App.tsx file and pass a wrapper function to the child nodes that calls the updater function for the state. Additionally, I have switched from storing the current screen as state to storing an object, making it easier to manage. Finally, I can now add images and links to posts a little easier so you can expect more of those in the future.",
                "^^Image, diagram3.png, New Method of Switching Screens^^",
                "The main object is to discuss my current project: a random dungeon generator generator. The name is a little weird, but the idea is to write an app that will allow me to generate a set of code that, when run, will output a random dungeon.",
                "I often find myself creating rogue like dungeon games in my spare time, and it becomes very tedious to write a new random dungeon generator each time and for each different algorithm or approach to generation. So, to minimize this time, I want the random dungeon generate to be able to allow the user to select an algorithm for random generation, define some rooms, and then generate some code in java or gd-script that will generate a random dungeon.",
                "^^Image, diagram4.png, Random Dungeon Generator Generator^^",
                "Currently, I am working on allowing the user to add doors to rooms, but, because the rooms can be concave, I need to write an algorithm to find the wall the user's mouse is closest to and place a door on that wall. I am familiar with a line to point distance formula that should help, so you can expect an update on that soon. If you ever want to run the project yourself or take a look at the code (though not finished yet), you can find the github page <a href='https://github.com/Fenton-P/random-dungeon-generator-generator'>here</a>.",
                "Thanks for reading - Fenton"
            ]
        },
        {
            "title": "Convex and Concave Polygon Border Detection",
            "date": "7/5/2025",
            "summary": "Projecting a Point onto a Polygon",
            "body": [
                "With regards to my random dungeon generator generator, I bring news about an algorithm that I have produced to determine the closest point on any given polygon’s border (whether it be concave or convex) to another point (presumably the mouse). Some adjustments must still be made, but the general idea can be observed already.",
                "In any case, here is the algorithm:",
                "1. Take all points in the polygon P and generate a list L of all lines that comprise the polygon.",
                "2. Take your reference point z and calculate the distance to each line and store those in array D",
                "3. Create a reference array R and list each index of each element in D, then sort R based on D",
                "4. Take the first element of R, r1, and find the closest point on line L[r1] to z, refer to it as p",
                "5. If p falls between the two points comprising L[r1], find the closest point out of p and all of the vertices of the polygon, then return it",
                "6. If it doesn’t, remove r1 from R and go back to step 4, if R has no more elements proceed to 7",
                "7. Find the closest vertice to z and return that point instead",
                "^^Image, diagram5.png, Full Algorithm (Though Messy)^^",
                "After discovering this algorithm I tailored it to my needs: instead of returning a point, I returned the two indexes of the points that comprised the line that the point outside the polygon fell on as well as a scalar value that described how far over the line went.",
                "^^Image, diagram6.png, Example Given Point P^^",
                "For the second part of this post, I will go into a little more detail and provide a code example of this algorithm for any who are curious about its implementation.",
                "1. To transform all of the points in P to L, simply iterate over each point p and store a line from the current point in P and the next point in P (If there is no next point, then put the first point in P).",
                "2. Step 2 requires the point to line distance formula: |A * z.x + B * z.y + C| / sqrt(A * A + B * B). Where Ax + By + C = 0 is the equation of the line and z.x and z.y are the x and y components of z respectively. To calculate A: x1 - x2, B: y2 - y1, C: y1 * x2 - y2 * x1. Where the first point is (x1, y1) and the second point is (x2, y2). Simply store these values in array D with the same order as the list of lines to finish this step.Step 2 requires the point to line distance formula: |A * z.x + B * z.y + C| / sqrt(A * A + B * B). Where Ax + By + C = 0 is the equation of the line and z.x and z.y are the x and y components of z respectively. To calculate A: x1 - x2, B: y2 - y1, C: y1 * x2 - y2 * x1. Where the first point is (x1, y1) and the second point is (x2, y2). Simply store these values in array D with the same order as the list of lines to finish this step.",
                "3. Reference array R just holds reference values to distances in D and lines in L. R should look like [0, 1, …, n] given an n sided polygon at the start. For the sake of simplicity, let P be a 3 sided polygon in this example. R would look like this: [0, 1, 2]. Due to the position of point z, let’s say D (the distances from point Z to each line) looks like this: [12, 24, 11]. The goal would be to sort R such that the reference values would point to the D values ascending in order. So R would now look like this: [2, 0, 1].",
                "4. Now, you should take the first element in R to reference the according line in L (so L[R[0]]). To find the closest point on this line to point z, the following formula can be applied: (B * B * z.x - C * A - z.y * B * A) / (B * B + A * A) = x, and y = (A * z.x + C) / B. Note that if B is zero then y will be undefined, to remedy this, just return z.y if B is equal to zero (Also, remember A, B, and C as variables to describe a line from earlier). Let (x, y) now comprise point p.",
                "5. Given point p from the previous step, we need to check if it actually falls between the two points that comprise the line on the polygon. To do this (because we already know the point falls on the line) we can just check if the point falls within the length of the line from both points that make the line. So, where p1 and p2 are the points that make the line of the polygon we are checking, distance d1 = distanceBetween(p1, p2), d2 = distanceBetween(p1, p), and d3 = distanceBetween(p2, p). The distance between function is just the pythagorean theorem: (p1, p2) -> (p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y). After performing this check, if the point falls between the two points, we now need to check if any of the vertices of the polygon are closer to mouse (to ensure that the point is going to be on the correct side of the polygon). To do this, just check the distance to each vertex of the polygon, if the distance to one of the points is less, return that point instead, otherwise return point p as the closest point to the reference point.",
                "6. If the check fails, however, simply remove R[0]. if R now has no more elements, proceed to step 7, otherwise go back to step 4.",
                "7. Simply apply the distance formula from before (distanceBetween), on every vertice of the polygon. Determine the closest point to your reference point z and return that point instead.",
                "Here is an example of what this algorithm should look like once implemented:",
                "^^PointOnPolygon^^",
                "You may notice that in the concave portion of the polygon that the point will jump quickly to the other line. My current theory as to why this happens is because as the mouse point gets projected onto the polygon, it becomes impossible to make the projected point closer to the concave vertex without another line taking priority. Thus, you have to move the mouse closer and closer to make the point approach the vertex. By this logic, at vertices that form an greater than 180 degree angle, the point will be 'swallowed' up by the other sides.",
                "Other than that flaw (though I hardly consider it one), the algorithm works as intended and should function to allow the user to place doors on the walls of rooms as they please.",
                "Thanks for reading - Fenton"
            ]
        },
        {
            "title": "Concave Polygon Triangulation",
            "date": "7/12/2025",
            "summary": "Triangulating a Polygon",
            "body": [
                "Another update for the Random Dungeon Generator Generator: the implementation of convex and concave polygon collision. The algorithm that I used came from a ^^Link, https://www.youtube.com/watch?v=QAdfkylpYwc&msockid=cf1421d75dd011f0b8bd3c9f8013ea02, video^^ by two bit coding which described a method to describe any polygon as a series of triangles, from that, I could check whether any of the triangles were intersecting – a much easier task.",
                "Before you begin, you must ensure that the polygon’s points are in clockwise, or counter clockwise, order. If they are not, this algorithm will not work. With that aside, here is the algorithm:",
                "1. Create a triangle composed of points p1, p2, and p(n-1) from set p of all points in the polygon and where n is the size of p, let your current index i be 0.",
                "2. Check the angle of t1 in this triangle, if it is smaller than 180 continue to step 3, otherwise step 6.",
                "3. Check whether any other point from set p is inside the triangle, if there isn’t, continue to step 4, otherwise step 6.",
                "4. Add the triangle to the list of triangles and remove p1 from p.",
                "5. If there are only 3 points in p, create a triangle with those points and add it to the list of triangles and then return that list of triangles, otherwise, go back to step 1.",
                "6. Increment i by 1 and then create a triangle with p(i), p((i + 1) % n),  and p((i + 2) % n) from set p. Now call these points t2, t1, t3 respectively of the triangle. Use this triangle as you go to step 2.",
                "^^Image, diagram7.png, Triangulation Algorithm^^",
                "^^TriangulationExample^^",
                "Just to add, but, the example is very easy to break at the moment because the user has complete control over the points with no regards to whether a possible polygon was even formed. For the time being though, the algorithm serves to do what it is needed to do.",
                "A future blog post will cover how to check if a point is in a triangle as well as how to check if a triangle is colliding with another triangle.",
                "Thanks for reading - Fenton"
            ]
        }
    ]
}